"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8161],{27332:e=>{e.exports=JSON.parse('{"functions":[{"name":"MakeDictionary","desc":"Takes an array and flips its values into dictionary keys with value of true.","params":[{"name":"array","desc":"","lua_type":"{ any }"}],"returns":[{"desc":"","lua_type":"{ [any]: true }\\r\\n"}],"function_type":"static","source":{"line":17,"path":"CmdrX/Shared/Util.luau"}},{"name":"DictionaryKeys","desc":"Takes a dictionary and returns its keys.","params":[{"name":"dict","desc":"","lua_type":"{ [any]: any }"}],"returns":[{"desc":"","lua_type":"{ any }\\r\\n"}],"function_type":"static","source":{"line":30,"path":"CmdrX/Shared/Util.luau"}},{"name":"MakeFuzzyFinder","desc":"Returns a function that is a fuzzy finder for the specified set or container.\\n\\nCan pass an array of strings, array of instances, array of EnumItems,\\narray of dictionaries with a Name key or an instance (in which case its children will be used).\\n\\nExact matches will be inserted in the front of the resulting array.","params":[{"name":"setOrContainer","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"(string, boolean?, boolean?) -> string\\r\\n"}],"function_type":"static","source":{"line":66,"path":"CmdrX/Shared/Util.luau"}},{"name":"GetNames","desc":"Takes an array of instances (or anything with a Name property) and maps them into an array of their names.\\n\\nIf no Name property is present, then tostring will be called instead.","params":[{"name":"instances","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"{ string }\\r\\n"}],"function_type":"static","source":{"line":131,"path":"CmdrX/Shared/Util.luau"}},{"name":"SplitStringSimple","desc":"Splits a string using a simple separator (no quote parsing)","params":[{"name":"input","desc":"","lua_type":"string"},{"name":"sep","desc":"","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"{ string }\\r\\n"}],"function_type":"static","source":{"line":140,"path":"CmdrX/Shared/Util.luau"}},{"name":"ParseEscapeSequences","desc":"Parses escape sequences into their fully qualified characters","params":[{"name":"text","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string\\r\\n"}],"function_type":"static","source":{"line":160,"path":"CmdrX/Shared/Util.luau"}},{"name":"EncodeEscapedOperator","desc":"No description.","params":[{"name":"text","desc":"","lua_type":"string"},{"name":"op","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string\\r\\n"}],"function_type":"static","source":{"line":172,"path":"CmdrX/Shared/Util.luau"}},{"name":"EncodeEscapedOperators","desc":"No description.","params":[{"name":"text","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string\\r\\n"}],"function_type":"static","source":{"line":188,"path":"CmdrX/Shared/Util.luau"}},{"name":"SplitString","desc":"Splits a string by space but taking into account quoted sequences which will be treated as a single argument.","params":[{"name":"text","desc":"","lua_type":"string"},{"name":"max","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"{ string }\\r\\n"}],"function_type":"static","source":{"line":212,"path":"CmdrX/Shared/Util.luau"}},{"name":"MashExcessArguments","desc":"Takes an array of arguments and a max value. Any indicies past the max value will be appended to the last valid argument.","params":[{"name":"arguments","desc":"","lua_type":"{ string }"},{"name":"max","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"{ string }\\r\\n"}],"function_type":"static","source":{"line":245,"path":"CmdrX/Shared/Util.luau"}},{"name":"TrimString","desc":"Trims whitespace from both sides of a string.","params":[{"name":"str","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string\\r\\n"}],"function_type":"static","source":{"line":260,"path":"CmdrX/Shared/Util.luau"}},{"name":"GetTextSize","desc":"Returns the text bounds size based on given text, label (from which properties will be pulled), and optional Vector2 container size.","params":[{"name":"text","desc":"","lua_type":"string"},{"name":"label","desc":"","lua_type":"TextLabel"},{"name":"size","desc":"","lua_type":"Vector2?"}],"returns":[{"desc":"","lua_type":"Vector2\\r\\n"}],"function_type":"static","source":{"line":269,"path":"CmdrX/Shared/Util.luau"}},{"name":"MakeEnumType","desc":"Makes an Enum type.","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"values","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"TypeDefinition"}],"function_type":"static","source":{"line":277,"path":"CmdrX/Shared/Util.luau"}},{"name":"ParsePrefixedUnionType","desc":"Parses a prefixed union type argument (such as %Team)","params":[{"name":"typeValue","desc":"","lua_type":"string"},{"name":"rawValue","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string?"},{"desc":"","lua_type":"string?"},{"desc":"","lua_type":"string?"}],"function_type":"static","source":{"line":296,"path":"CmdrX/Shared/Util.luau"}},{"name":"MakeListableType","desc":"Creates a listable type from a singular type","params":[{"name":"type","desc":"","lua_type":"TypeDefinition"},{"name":"override","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"TypeDefinition"}],"function_type":"static","source":{"line":328,"path":"CmdrX/Shared/Util.luau"}},{"name":"RunCommandString","desc":"Creates a listable type from a singular type","params":[{"name":"dispatcher","desc":"","lua_type":"Dispatcher"},{"name":"commandString","desc":"","lua_type":"string"}],"returns":[{"desc":"output from Dispatcher:EvaluateAndRun as a string","lua_type":"string?"}],"function_type":"static","source":{"line":364,"path":"CmdrX/Shared/Util.luau"}},{"name":"RunEmbeddedCommands","desc":"Runs embedded commands and replaces them","params":[{"name":"dispatcher","desc":"","lua_type":"Dispatcher"},{"name":"str","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string\\r\\n"}],"function_type":"static","source":{"line":389,"path":"CmdrX/Shared/Util.luau"}},{"name":"SubstituteArgs","desc":"Replaces arguments in the format $1, $2, $something with whatever the given function returns for it.","params":[{"name":"str","desc":"","lua_type":"string"},{"name":"replace","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string\\r\\n"}],"function_type":"static","source":{"line":420,"path":"CmdrX/Shared/Util.luau"}},{"name":"MakeAliasCommand","desc":"Creates an alias command, should only be used on the client.","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"commandString","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"CommandDefinition"}],"function_type":"static","source":{"line":440,"path":"CmdrX/Shared/Util.luau"}},{"name":"MakeSequenceType","desc":"Makes a type that contains a sequence, e.g. Vector3 or Color3\\n\\nFor options, one of Constructor or Parse is required","params":[{"name":"options","desc":"","lua_type":"{ Parse: function?, Constructor: function?, TransformEach: function?, ValidateEach: function?, Prefixes: {string}?, Length: number? }"}],"returns":[{"desc":"","lua_type":"ArgumentDefinition"}],"function_type":"static","source":{"line":493,"path":"CmdrX/Shared/Util.luau"}},{"name":"SplitPrioritizedDelimeter","desc":"Splits a string by a single delimeter chosen from the given set. The first matching delimeter from the set becomes the split character.","params":[{"name":"text","desc":"","lua_type":"string"},{"name":"delimiters","desc":"","lua_type":"{ string }"}],"returns":[{"desc":"","lua_type":"{ string }?\\r\\n"}],"function_type":"static","source":{"line":543,"path":"CmdrX/Shared/Util.luau"}}],"properties":[],"types":[],"name":"Util","desc":"CmdrX utilities module.\\n\\n:::info Beta\\nThis page is incomplete and some functions are missing. You might want to refer to [the current documentation](https://eryn.io/CmdrX/api/Util.html).\\n:::","source":{"line":12,"path":"CmdrX/Shared/Util.luau"}}')}}]);