"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9459],{338:(e,r,d)=>{d.r(r),d.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>a,frontMatter:()=>c,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"types","title":"Types","description":"By default, these types are available:","source":"@site/docs/12-types.md","sourceDirName":".","slug":"/types","permalink":"/docs/types","draft":false,"unlisted":false,"editUrl":"https://github.com/BiraruX/CmdrX/edit/main/docs/12-types.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Hooks","permalink":"/docs/hooks"},"next":{"title":"Meta-commands","permalink":"/docs/metacommands"}}');var s=d(74848),t=d(28453);const c={},i="Types",l={},o=[{value:"Default value",id:"default-value",level:2},{value:"Enum types",id:"enum-types",level:2}];function h(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"types",children:"Types"})}),"\n",(0,s.jsx)(r.p,{children:"By default, these types are available:"}),"\n",(0,s.jsx)(r.admonition,{title:"Possibly outdated",type:"info",children:(0,s.jsx)(r.p,{children:"We've not reviewed this section for a while, it's possible that this information may be out of date."})}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:(0,s.jsx)(r.strong,{children:"Type name"})}),(0,s.jsx)(r.th,{children:"Luau type"}),(0,s.jsx)(r.th,{children:(0,s.jsx)(r.strong,{children:"Type name"})}),(0,s.jsx)(r.th,{children:"Luau type"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"string"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"string"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"strings"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{string}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"number"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"number"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"numbers"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{number}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"integer"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"number"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"integers"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{number}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"boolean"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"boolean"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"booleans"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{boolean}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"player"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Player"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"players"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{Player}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"playerId"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"number"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"playerIds"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{number}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"team"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Team"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"teams"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{Team}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"teamPlayers"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{Player}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"command"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"string"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"commands"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{string}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"userInput"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Enum.UserInputType &#124; Enum.KeyCode"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"userInputs"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{Enum.UserInputType &#124; Enum.KeyCode}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"brickColor"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"BrickColor"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"brickColors"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{BrickColor}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"teamColor"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"BrickColor"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"teamColors"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{BrickColor}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"color3"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Color3"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"color3s"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{Color3}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"hexColor3"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Color3"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"hexColor3s"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{Color3}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"brickColor3"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Color3"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"brickColor3s"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{Color3}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"vector3"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Vector3"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"vector3s"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{Vector3}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"vector2"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"Vector2"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"vector2s"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{Vector2}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"duration"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"number"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"durations"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{number}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"storedKey"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"string"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"storedKeys"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{strings}"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"url"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"string"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"urls"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"{strings}"})})]})]})]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"type name"})," is what you'd include in your command definition, while the ",(0,s.jsx)(r.code,{children:"Luau type"})," is what your command implementation would get (this is also called the 'transformed value')."]}),"\n",(0,s.jsx)(r.p,{children:"Plural types (types that return a table) are listable, so you can provide a comma-separated list of values."}),"\n",(0,s.jsxs)(r.p,{children:["Custom types are defined as tables that implement specific named functions. When Types are in a ModuleScript, the ModuleScript should not return the table directly; instead it should return a function, which accepts the Registry as a parameter. You should then call ",(0,s.jsx)(r.a,{href:"/api/Registry#RegisterType",children:(0,s.jsx)(r.code,{children:'registry:RegisterType("typeName", yourTable)'})})," to register it. This is important because if a type is only registered on one realm (the client but not the server, or vice versa) then it may cause unexpected bugs and errors."]}),"\n",(0,s.jsxs)(r.p,{children:["Check out the ",(0,s.jsx)(r.a,{href:"/api/Registry#TypeDefinition",children:"API reference"})," for a full reference of all available options."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'local intType = {\r\n\tTransform = function(text)\r\n\t\treturn tonumber(text)\r\n\tend,\r\n\r\n\tValidate = function(value)\r\n\t\treturn value ~= nil and value == math.floor(value), "Only whole numbers are valid."\r\n\tend,\r\n\r\n\tParse = function(value)\r\n\t\treturn value\r\n\tend,\r\n}\r\n\r\nreturn function(registry)\r\n\tregistry:RegisterType("integer", intType)\r\nend\n'})}),"\n",(0,s.jsxs)(r.p,{children:["Take a gander at the ",(0,s.jsx)(r.a,{href:"https://github.com/BiraruX/CmdrX/tree/main/CmdrX/BuiltInTypes",children:"built-in types"})," for more examples."]}),"\n",(0,s.jsx)(r.h2,{id:"default-value",children:"Default value"}),"\n",(0,s.jsxs)(r.p,{children:['You can specify a "default value" for your type by adding a ',(0,s.jsx)(r.code,{children:"Default"})," function to it. For example, the default value for the ",(0,s.jsx)(r.code,{children:"players"})," type is the name of the player who ran the command. The ",(0,s.jsx)(r.code,{children:"Default"})," function should always return a ",(0,s.jsx)(r.code,{children:"string"}),", as this is inserted ",(0,s.jsx)(r.strong,{children:"before"})," parsing."]}),"\n",(0,s.jsxs)(r.p,{children:["For any argument whose type has a default value, you can simply input ",(0,s.jsx)(r.code,{children:"."})," and the default value will automatically be used in its place. E.g. ",(0,s.jsx)(r.code,{children:"kill ."})]}),"\n",(0,s.jsx)(r.h2,{id:"enum-types",children:"Enum types"}),"\n",(0,s.jsx)(r.p,{children:"Because Enum types are so common, there is a special function that easily lets you create an Enum type. When a command has an argument of this type, it'll always be a string matching exactly one of the strings in the array you define (see below)."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-lua",children:'return function (registry)\r\n\tregistry:RegisterType("place", registry.CmdrX.Util.MakeEnumType("Place", {"World 1", "World 2", "World 3", "Final World"}))\r\nend\n'})})]})}function a(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,r,d)=>{d.d(r,{R:()=>c,x:()=>i});var n=d(96540);const s={},t=n.createContext(s);function c(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);